
class LinkedList 
{ 
    static Node head; // head of linked list 
    private class Node 
    { 
        int data; 
        Node right, down;
        Node(int d) 
        { 
            data = d; 
            right = null; 
            down = null;
        } 
    } 
    Node merge(Node a, Node b) 
    { 
        if (a == null)     return b; 
        if (b == null)      return a; 
        Node result; 
        if (a.data < b.data) 
        { 
            result = a; 
            result.down =  merge(a.down, b); 
        } 
        else
        { 
            result = b; 
            result.down = merge(a, b.down); 
        } 
        return result; 
    } 
    Node flatten(Node root) 
    { 
        if (root == null || root.right == null) 
            return root; 
        root.right = flatten(root.right); 
        root = merge(root, root.right); 
        return root; 
    } 
    public Node add(Node head_ref, int data) 
    { 
        Node new_node = new Node(data);
        new_node.down = head_ref; 
        head_ref = new_node; 
        return head_ref;
    } 
    public void print_list() 
    { 
        Node temp = head; 
        while (temp != null) 
        { 
            System.out.print(temp.data+"->"); 
            temp = temp.down; 
        } 
        System.out.println("NULL"); 
    } 
    public static void main(String [] args) 
    { 
        LinkedList L = new LinkedList(); 
        L.head = L.add(L.head, 9); 
        L.head = L.add(L.head, 6); 
        L.head = L.add(L.head, 2); 
        L.head = L.add(L.head, 1); 
        L.head.right = L.add(L.head.right, 11); 
        L.head.right = L.add(L.head.right, 5); 
        L.head.right.right = L.add(L.head.right.right, 15); 
        L.head.right.right = L.add(L.head.right.right, 10); 
        L.head.right.right = L.add(L.head.right.right, 7); 
        L.head.right.right.right = L.add(L.head.right.right.right, 50); 
        L.head.right.right.right = L.add(L.head.right.right.right, 40); 
        L.head.right.right.right = L.add(L.head.right.right.right, 30); 
        L.head = L.flatten(L.head); 
        L.print_list(); 
    } 
} 
